org: matiasvallejosdev
app: ecoexplorer-ar
service: ecoexplorer-ar-api

provider:
  name: aws
  runtime: python3.10
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  architecture: x86_64
  apiGateway:
    description: API Gateway for Ecoexplorer AR Game - ${self:provider.stage} stage
    apiKeys:
      - name: ${self:service}-${self:provider.stage}-key
        description: API Key for ${self:provider.stage} stage
    usagePlan:
      quota:
        limit: 5000
        offset: 2
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
  environment:
    STAGE: ${self:provider.stage}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    OPENAI_GPTMODEL: ${env:OPENAI_GPTMODEL}
    OPENAI_TEMPERATURE: ${env:OPENAI_TEMPERATURE}
    OPENAI_TOKENS: ${env:OPENAI_TOKENS}
    S3_BUCKET_NAME: ${self:custom.bucketName}
    S3_BUCKET_REGION: ${self:custom.bucketRegion}

package:
  individually: true
  patterns:
    - "!node_modules/**"
    - "!venv/**"
    - "!./**"

functions:
  health:
    handler: services/health/health_check.lambda_handler
    name: ${self:service}-${self:provider.stage}-health
    description: Health Check for API Gateway - ${self:provider.stage} stage
    events:
      - http:
          path: /health
          method: GET
    package:
      patterns:
        - "services/health/health_check.py"
        - "common/**/*.py"
  get_file_url:
    handler: services/files/get_file_url.lambda_handler
    name: ${self:service}-${self:provider.stage}-get-file-url
    description: Get file URL from AWS bucket - ${self:provider.stage} stage
    events:
      - http:
          path: /files
          method: GET
          private: true
    package:
      patterns:
        - "services/files/get_file_url.py"
        - "common/**/*.py"
  get_presigned_url_s3:
    handler: services/files/get_presigned_url_s3.lambda_handler
    name: ${self:service}-${self:provider.stage}-get-presigned-url-s3
    description: Get presigned URL for S3 bucket - ${self:provider.stage} stage
    role: s3BucketRole
    events:
      - http:
          path: /files/upload
          method: GET
          private: true
    package:
      patterns:
        - "services/files/get_presigned_url_s3.py"
        - "common/**/*.py"
  image_recognition_mock:
    handler: services/gpt/image_recognition_mock.lambda_handler
    name: ${self:service}-${self:provider.stage}-image-recognition-mock
    description: Image Recognition mock for testing - ${self:provider.stage} stage
    events:
      - http:
          path: /gpt/image-recognition-mock
          method: POST
          private: true
    package:
      patterns:
        - "services/gpt/image_recognition_mock.py"
        - "common/**/*.py"
  image_recognition:
    handler: services/gpt/image_recognition.lambda_handler
    name: ${self:service}-${self:provider.stage}-image-recognition
    description: Recognize image from url - ${self:provider.stage} stage
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: /gpt/image-recognition
          method: POST
          private: true
    layers:
      - ${self:custom.layers.openAILayerPyArn}
    package:
      patterns:
        - "services/gpt/image_recognition.py"
        - "services/gpt/config/**/*.py"
        - "services/gpt/src/**/*.py"
        - "common/**/*.py"
  storyteller:
    handler: services/gpt/storyteller.lambda_handler
    name: ${self:service}-${self:provider.stage}-storyteller
    description: Storyteller for Ecoexplorer AR Game - ${self:provider.stage} stage
    memorySize: 128
    timeout: 30
    role: s3BucketRole
    events:
      - http:
          path: /gpt/storyteller
          method: POST
          private: true
    layers:
      - ${self:custom.layers.openAILayerPyArn}
    package:
      patterns:
        - "services/gpt/storyteller.py"
        - "services/gpt/config/**/*.py"
        - "services/gpt/src/**/*.py"
        - "common/**/*.py"
  storyteller_mock:
    handler: services/gpt/storyteller_mock.lambda_handler
    name: ${self:service}-${self:provider.stage}-storyteller-mock
    description: Storyteller mock for testing - ${self:provider.stage} stage
    events:
      - http:
          path: /gpt/storyteller-mock
          method: POST
          private: true
    package:
      patterns:
        - "services/gpt/storyteller_mock.py"
        - "common/**/*.py"

resources:
  Resources:
    s3BucketRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: s3BucketRoleEcoexplorerApi
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - ${self:custom.bucketPolicyArn}

custom:
  bucketName: ecoexplorerar-dev
  bucketRegion: us-east-1
  bucketPolicyArn: arn:aws:iam::680662318279:policy/ecoexplorerar-api-s3-bucket
  layers:
    openAILayerPyArn: arn:aws:lambda:us-east-1:680662318279:layer:openai-aws-lambda
